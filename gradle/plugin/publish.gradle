apply plugin: 'maven-publish'

def getEnvValueOrEmpty(String key) {
    String value = System.getenv(key)
    return value != null ? value : ""
}

def getReleaseRepository() {
    return getEnvValueOrEmpty("PRIVATE_NEXUS_RELEASE_URL")
}

def getSnapshotRepository() {
    return getEnvValueOrEmpty("PRIVATE_NEXUS_SNAPSHOT_URL")
}

def getRepositoryUsername() {
    return getEnvValueOrEmpty("PRIVATE_NEXUS_USER")
}

def getRepositoryPassword() {
    return getEnvValueOrEmpty("PRIVATE_NEXUS_PASSWORD")
}

afterEvaluate { project ->
    publishing {
        publications {
            mavenAar(MavenPublication) {
                from components.release
                groupId GROUP
                version rootProject.authVersion
                afterEvaluate {
                    artifact sourcesJar
                    artifact javadocJar
                }
                pom {
                    name = POM_NAME
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL
                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                url isRelease ? getReleaseRepository() : getSnapshotRepository()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    tasks.register('javadocJar', Jar) {
        dependsOn dokkaHtml
        archiveClassifier.set('javadoc')
        from "$buildDir/dokka"
    }
}
